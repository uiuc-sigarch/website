#+title: Frequently Asked Questions
#+include: header.org

1. *What is computer architecture?*

   Computer architecture is the study of how computer systems are
   built. @noelle TODO.

2. *Why is it important?*

   @noelle TODO.

3. *I'm interested in computer architecture, where should I start learning?*

   A great place to start is coming to [[./meetings.org][SIGARCH meetings]]! Outside SIGARCH,
   there are various routes you can take.

   1. *Classes:* The ECE and CS departments at UIUC both offer classes
      in computer architecture or related topics:
      #+ATTR_LATEX: :booktabs t
      | Class                      | Content                                                                                                                                                           | Comments                                                                                                                                                 |
      |----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------|
      | ECE 120                    | Digital logic, basic computer organization, assembly programming. Uses LC-3.                                                                                      | As a first course in computer architecture, covers extremely important fundamental concepts (critical paths, logic minimization, FSMs).                  |
      | CS 233                     | Basic Verilog[fn:1], basic computer organization, assembly programming and optimization. Uses MIPS.                                                               | Lots of MIPS programming and learning how C compiles down. The honors section lets you build a project with FPGAs[fn:2] at the end.                            |
      |----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------|
      | {{{color(gray, ECE 220)}}} | {{{color(gray, Interrupts and privilege. Mostly a programming class outside the first two weeks.)}}}                                                              | {{{color(gray, Not really an architecture class outside what's mentioned. Though C is useful to know.)}}}                                                |
      | {{{color(gray, ECE 385)}}} | {{{color(gray, SystemVerilog and FPGA class. One lab implements a subset of LC-3 on an FPGA.)}}}                                                                  | {{{color(gray, Class is being reworked as of SU23 to use Xilinx. Does not cover SystemVerilog in enough detail to do modern RTL design/verification.)}}} |
      |----------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------|
      | CS 433                     | Performance evaluation, ILP, caches, parallelism, multi-core. Some advanced topics on pipeline and cache optimization.                                            | No MPs, the class is homework and exam based. There are projects and presentations for both the undergraduate and graduate sections.                     |
      | ECE 411                    | Modern computer architecture: performance evaluation, caches, pipelining, memory systems, types of I/O, parallel processing, some advanced concepts. Uses RISC-V. | Requires ECE 391[fn:3] (and you'll need to know SystemVerilog for the MPs). The final project is an excellent opportunity to build something ambitious.        |

      Outside these, there various graduate courses offered each
      semester.

   2. *Self-study:* There are two parallel tracks to follow: learning
      theory and writing actual implementations. We'll elaborate on
      both of these:

      *Theory:* Here are some book recommendations:
      - If you're in ECE, you've taken (or are going to take)
        courses based on Patt and Patel's book: [[https://i-share-uiu.primo.exlibrisgroup.com/permalink/01CARLI_UIU/gpjosq/alma99908131312205899][Introduction to Computing Systems: From Bits and Gates to C and Beyond]].
        This book covers the LC-3 architecture.
      - Another good (also slightly unorthodox) book that goes top-down (instead of the
        bottom-up approach Patt and Patel uses) is Bryant and
        O'Hallaron's [[https://i-share-uiu.primo.exlibrisgroup.com/permalink/01CARLI_UIU/gpjosq/alma99454154312205899][Computer Systems: A Programmer's Perspective]].
        Here's more on the [[http://csapp.cs.cmu.edu/2e/perspective.html][philosophy]] behind the book.
      - For basic architecture knowledge, we recommend Patterson
        and Hennessy's book, [[https://i-share-uiu.primo.exlibrisgroup.com/permalink/01CARLI_UIU/gpjosq/alma99362146912205899][Computer Organization and Design]]. Try
        to get the RISC-V edition.
      - For more advanced topics, see Hennessy and Patterson's book
        [[https://i-share-uiu.primo.exlibrisgroup.com/permalink/01CARLI_UIU/gpjosq/alma99847468812205899][Computer Architecture: A Quantitative Approach]], which
        covers memory hierarchies, out of order and superscalar
        execution, and parallelism.
      - The [[https://dblp.org/db/series/synthesis/cac.html][Synthesis Lectures on Computer Architecture]] cover a
        single topic in great detail, and are a good read for more
        advanced students.

      *Projects/Implementation:* Resources here are a bit more scarce:
      - An excellent route is to learn some Verilog. Try [[https://hdlbits.01xz.net/wiki/Main_Page][HDLBits]]
        while starting out. Unfortunately, the really hard part of
        RTL design is verification, which isn't well-covered.
      - Once you know Verilog, try implementing a basic processor
        ([[https://github.com/nebhrajani-a/lc3][like LC-3]]), and running some basic programs in
        simulation.[fn:4] Synthesize your core to an FPGA, and run
        a similar set of program there.
      - Continuing --- pipeline your processor, implement a memory system,
        (caches!). Make your cache more efficient (is it
        write-back? pipelined? lockup-free?). Add branch
        prediction. Add prefetching. Make it out-of-order. Is it
        superscalar? Instantiate multiple cores and solve coherence
        problems using snooping/directories. Add an MMU and TLBs. Try
        booting a real OS on your core ([[https://en.wikipedia.org/wiki/Xv6][xv6]], Linux, etc.).
        Implement a paper.
      We know --- projects are hard and need resources that aren't
      always available. This is where SIGARCH's workshops come in: we
      provide hardware and guidance, and you get to
      implement something cool over a couple of days!


* Footnotes

[fn:1] (System)Verilog is a hardware description language (HDL) --- a specialized computer language used to model and implement
electronic circuits.

[fn:2] An FPGA (field-programmable gate array) is a chip that can be
reprogrammed by software to behave like any digital circuit, specified
using an HDL.

[fn:3] ECE 391 is a systems (not architecture) class. The
prerequisite exists since 411 uses concepts such as virtual memory and
TLBs that are covered in 391.

[fn:4] If you're more CS-oriented, writing a Python assembler or
emulator is a fun extension of this project. Advanced: [[https://llvm.org/docs/WritingAnLLVMBackend.html][write an LLVM
backend]] for your architecture so that you can run C on it!
